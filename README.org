#+TITLE: NixOS Configuration
#+options: toc:3
#+auto_tangle: t
#+PROPERTY: header-args :results silent
#+STARTUP: overview

* Overview
My NixOS configuration flake so far.

* Highlights
| Window Manager  | i3              |
| Bar             | i3status        |
| Editor          | Emacs           |
| Terminal        | xterm           |
| Browser         | Firefox         |
| Launcher        | rofi            |
| Notify server   | dunst           |
| Monitor manager | arandr          |
| Screenshot      | scrot/flameshot |
| Bluetooth       | blueman         |
| Screencast      | ffcast          |

* Literate Configuration
There's an attempt to turn my entire configuration into a literate one.
** Rationale
- Write documentation, not comments.
- Split the configuration into sensible modules.
** Pros
- ~org-mode~ navigation of one configuration file.
- Configure the ~extraCongif~ argument in the correct language.
- Break-down any configuration.
- Enable disabling of code with comments or removing them.
** Cons
- Requires knowledge of ~org-mode~.
- Requires an initial time investment to setup.
- Mistakes could be made in the ~:tangle~ header argument.
** Styles
I have so far found two styles to write the configuration, we can count two more
variations if we include the property of ~:header-args~

*** Without noweb and without ~:header-args~

This is the most basic form where you include the path to the file in every
code block.

~extraConfig~ is broken into three blocks. First for the start, second for the
configuration and the last to close the quotes.
*** With noweb and without ~:header-args~

This is also basic as you include the path to the file in every code block
*except* those where the configuration for ~extraConfig~ is written.

~extraConfig~ is broken into two blocks. One for everything except the
~extraConfig~ argument and one for the ~extraConfig~ argument. This one is
preferred to the first as you do not have to keep track of opening and
closing everything.

This style also requires naming the blocks for the ~extraConfig~. Potential
names are ~program_config~ and ~program_extraConfig~.
This is the same
*** With noweb and with ~:header-args~

This form enables omitting the path to file argument as it is included once
in the PROPERTY drawer of the org subtree.

The drawback is that every ~extraConfig~ block has to have a ~:tangle no~
argument to avoid duplication and a broken configuration.
*** With noweb and without ~:header-args~
Not used yet. The strucutre could be as follows:

1. One main block into which everything is included.
2. Any number of named code blocks with their documentation and any other
   comments.


This would avoid any need to include ~:tangle no~ as you simply do not include the
code block. I also noticed that this fixes code indentation problems.
* TODO Usage
** NixOS as a Desktop
** Development in Nix Flakes
** Development in Distrobox

* Future Concerns
Concerns for topics that are more than one year away. These do not affect the
current configuration.
** VFIO
In the future I want to build a PC with the goal of VFIO passthrough, I have
found a few guides but have not tested any myself.

If I can't make it work I'll just dual boot with Windows.
*** Resources
- [[https://nixos.wiki/wiki/PCI_passthrough][PCI passthrough - NixOS Wiki]]
- [[https://gist.github.com/CRTified/43b7ce84cd238673f7f24652c85980b3][VFIO Passthrough on NixOS Â· GitHub (2019-2021)]]
- [[https://forum.level1techs.com/t/nixos-vfio-pcie-passthrough/130916][NixOS VFIO PCIe Passthrough - Wikis & How-to Guides - Level1Techs Forums (2018-2022)]]
- [[https://astrid.tech/2022/09/22/0/nixos-gpu-vfio/][A GPU Passthrough Setup  for NixOS (with VR passthrough too!) | astrid.tech (2022-09-22)]]
*** Last Resort
- [ ] Can this be done with ~virt-manager~ installed inside an Arch Linux ~distrobox~?

* flake
#+begin_src nix :tangle flake.nix :noweb yes
  {
    description = "Adham's System Flake";

    inputs =
      {
	<<inputs>>
      };

    outputs = { self, nixpkgs, home-manager, ... }@inputs:
      let
	system = "x86_64-linux";
	pkgs = import nixpkgs {
		inherit system;
		config.allowUnfree = true;
	};
	lib = nixpkgs.lib;
      in {
	nixosConfigurations = {
		nixos = lib.nixosSystem {
		  inherit system;
		  modules = [
		    ./configuration.nix
		    home-manager.nixosModules.home-manager {
		      home-manager.useGlobalPkgs = true;
		      home-manager.useUserPackages = true;
		      home-manager.users.adham = {
			      imports = [ ./home.nix ];
		      };
		    }
		  ];
		};
	};
      };
  }

#+end_src

#+name: inputs
#+begin_src nix
  nixpkgs.url = "github:nixos/nixpkgs/nixos-unstable";
  home-manager = {
	  url = "github:nix-community/home-manager";
	  inputs.nixpkgs.follows = "nixpkgs";
  };
#+end_src

* home-manger
#+begin_src nix :tangle home.nix :noweb yes
  {config, pkgs, lib, ...}:
  {
    home = {
      stateVersion = "23.05";
      packages = with pkgs; [
	<<remote-control>>

	<<video-audio>>

	<<clojure>>

	<<cli>>

	<<password-managers>>

	<<applications>>

	<<gtk-themes>>

	<<x11-utilities>>
      ];
    };
    <<home-manager-programs>>

    <<home-manager-gtk-theme>>
  }

#+end_src

#+name: home-manager-gtk-theme
#+begin_src nix
  gtk = {
    enable = true;

    iconTheme = {
      name = "Papirus-Dark";
      package = pkgs.papirus-icon-theme;
    };

    theme = {
      name = "palenight";
      package = pkgs.palenight-theme;
    };

    cursorTheme = {
      name = "Quintom_Ink";
      package = pkgs.quintom-cursor-theme;
    };

    gtk3.extraConfig = {
      Settings = ''
	gtk-application-prefer-dark-theme=1
	gtk-cursor-theme-size=20
      '';
    };

    gtk4.extraConfig = {
      Settings = ''
	gtk-application-prefer-dark-theme=1
      '';
    };
  };

  home.sessionVariables.GTK_THEME = "palenight";
#+end_src

The themes I use
#+name: gtk-themes
#+begin_src text
  paper-gtk-theme
  pop-gtk-theme
  gnome.adwaita-icon-theme
#+end_src

#+name: home-manager-programs
#+begin_src nix
  programs.git = {
    enable = true;
    userName  = "adham-omran";
    userEmail = "git@adham-omran.com";
    signing = {
	    signByDefault = true;
	    key = "4D37E0ADEE0B9138";
    };
  };

  programs.ncmpcpp = {
    enable = true;
    mpdMusicDir = "/home/adham/music";
    settings = {
      mpd_host = "127.0.0.1";
      mpd_port = 9900;
      execute_on_song_change = "notify-send \"Now Playing\" \"$(mpc -p 9900 --format '%title% \\n%artist% - %album%' current)\"";
    };
  };

  services.blueman-applet.enable = true;
#+end_src

General applications. ~foliate~ is what I use to read E-Books and ~poedit~ is a
translation editor. ~zathura~ is my PDF reader. ~nemo~ is my file manager.
#+name: applications
#+begin_src text
  gnome.gnome-tweaks

  rnote
  xournalpp

  google-chrome
  nyxt

  libsForQt5.kcalc
  libsForQt5.kclock

  anki
  qbittorrent
  obs-studio
  poedit
  foliate
  zathura
  cinnamon.nemo
  libreoffice-qt
  discord
  telegram-desktop
  element-desktop
  spotify
  zotero
#+end_src

General CLI utilities. ~gtk3~ to provide ~gtk-launch~ which is used to launch
applications from Emacs with ~emacs-run-launcher~ although I rarely use this.

[[https://github.com/89luca89/distrobox][Distrobox]] is awesome. A lot of potential.

Since I'm back on X11 I could use [[https://github.com/rvaiya/warpd/][warpd]] to reduce my mouse usage even more. I
have to set it up again though.

~poppler_utils~ is related to Emacs's PDF reader but I am not sure if I even need
it here. I'll keep it for now.
#+name: cli
#+begin_src text
  texlive.combined.scheme-full

  poppler_utils

  warpd
  distrobox

  hunspell
  hunspellDicts.en_US

  gnuplot
  libnotify
  direnv
  gtk3
  graphviz
  openssl
  git
  stow
  tree
  ledger
  neofetch
  bat
  htop
  btop
  fd
  dmidecode
  powertop
  wget
  brightnessctl
  pavucontrol
  pfetch
#+end_src

#+name: video-audio
#+begin_src text
  mpv
  ffmpeg
  qpwgraph
  playerctl
  ncmpcpp
#+end_src

#+name: password-managers
#+begin_src text
  pass
  bitwarden
#+end_src

The following are X11 utilities.
#+name: x11-utilities
#+begin_src text
  arandr
  flameshot
  scrot
  xclip
  xsel
  feh
  dunst
  rofi
  ffcast
  xss-lock
  networkmanagerapplet
#+end_src

The following are utilities for sway. Currently unused and not tangled.
#+name: sway-cli
#+begin_src text
  mako
  slurp
  sway-contrib.grimshot
  swaybg
  wf-recorder
  wl-clipboard
  wofi
  eww-wayland
#+end_src

Currently I have Clojure installed on the user level, I want to move this into a
flake at some point.
#+name: clojure
#+begin_src text
  clojure
  leiningen
  clojure-lsp
#+end_src

** Using a DSLR Camera as a webcam
This setup is not active at the moment. Although from 30 minutes of testing I
found that the ~mptlvcap~ package which I install in an Arch-distrobox works
better than the ~gphoto2~ application.
#+begin_src text
  gphoto2
#+end_src

** Controlling another computer
~barrier~ does not work at the moment for unknown reasonr.

I am using the sunshine server on another machine that dual boots Windows and
Debian 12 and running Moonlight to access it.
#+name: remote-control
#+begin_src text
  sunshine
  moonlight-qt
  barrier
#+end_src
** TODO Setting default applications
- [[https://discourse.nixos.org/t/set-default-application-for-mime-type-with-home-manager/17190][Set default application for mime type with home-manager - Help - NixOS Discourse]]
- This sometimes conflicts with GNOME.
* configuration.nix
:PROPERTIES:
:header-args:
:END:
Edit this configuration file to define what should be installed on your system.
Help is available in the ~configuration.nix(5)~ man page and in the NixOS manual
(~nixos-help~).
#+begin_src nix :tangle configuration.nix :noweb yes
  { config, pkgs, callPackage, lib, ... }:
  {
    imports =
      [
		    <<config-enabled-modules>>
      ];
    <<config-boot>>
    <<config-networking>>
    <<config-timezone>>
    <<x11>>
    <<i3>>
    <<services>>
    <<audio>>
    <<shell>>
    <<user>>
    <<gpg>>
    <<ssh>>
    <<version>>
    <<nix-unfree>>
    <<nix-flake>>
    <<nix-cache>>
    <<nix-store>>
    <<nix-gc>>
  }
#+end_src
** Imports
*** Enabled modules
#+name: config-enabled-modules
#+begin_src nix
    ./hardware-configuration.nix
    ./cachix.nix
    ./modules/virtualization.nix
    ./modules/packages.nix
    ./modules/kanata.nix
    ./modules/gnome.nix
    ./modules/fonts.nix
    ./modules/power.nix
    ./modules/overlays.nix
    ./modules/tmux.nix
    ./modules/mpd.nix
#+end_src
*** Disabled modules
#+begin_src nix
  ./modules/hyprland.nix
  ./modules/sway.nix
  ./modules/kde.nix
#+end_src
** Boot
#+name: config-boot
#+begin_src nix
    boot.loader.systemd-boot.enable = true;
    boot.loader.efi.canTouchEfiVariables = true;
    boot.loader.efi.efiSysMountPoint = "/boot/efi";

    boot.extraModulePackages = with config.boot.kernelPackages; [
      v4l2loopback
    ];

    networking.hostName = "nixos";
#+end_src

Do not tangle.
- Enables wireless support via wpa_supplicant.
- Configure network proxy if necessary
#+begin_src nix
  networking.wireless.enable = true;

  networking.proxy.default = "http://user:password@proxy:port/";
  networking.proxy.noProxy = "127.0.0.1,localhost,internal.domain";
#+end_src

Enable networking
#+name: config-networking
#+begin_src nix
  networking.networkmanager.enable = true;
#+end_src


- Set your time zone.
- Set internationalization properties.
#+name: config-timezone
#+begin_src nix
  time.timeZone = "Asia/Baghdad";
  i18n.defaultLocale = "en_US.UTF-8";
#+end_src
** Window Manager
- Enable the X11 windowing system.
- Configure keymap in X11
#+name: x11
#+begin_src nix
  services.xserver = {
    enable = true;
    layout = "us";
  };

#+end_src

Enable the i3 window manager and install related packages.

- ~i3status~: Gives you the default i3 status bar.
- ~i3lock~: Default i3 screen locker.
- ~i3blocks~: If you are planning on using i3blocks over i3status.
#+name: i3
#+begin_src nix
  services.xserver.windowManager.i3 = {
    enable = true;
    package = pkgs.i3-gaps;
    extraPackages = with pkgs; [
      i3status
      i3lock
      i3blocks
    ];
  };
  services.picom = {
    enable = true;
    vSync = true;
    opacityRules = [
      "85:class_g = 'XTerm'"
    ];
  };
#+end_src
** Services
- ~light~: Light backlight control command
- [[https://nixos.wiki/wiki/Polkit][Polkit - NixOS Wiki]].
- Make sure to configure the ~syncthing~ directory else it will not work.
#+name: services
#+begin_src nix
    programs.light.enable = true;
    security.polkit.enable = true;

  services.xserver.wacom.enable = true;
  services.printing.enable = true;
  hardware.bluetooth.enable = true;
  services.hardware.bolt.enable = true;
  services.tailscale.enable = true;
  services.flatpak.enable = true;

  services.emacs = {
    package = pkgs.emacsUnstable;
    enable = true;
  };

  services.syncthing = {
    enable = true;
    user = "adham";
    configDir = "/home/adham/.config/syncthing";
  };

  services.blueman.enable = true;

#+end_src

To enable touchpad support add ~services.xserver.libinput.enable = true;~.
** Audio
Enable sound with pipewire.
#+name: audio
#+begin_src nix
  sound.enable = true;
  hardware.pulseaudio.enable = false;
  security.rtkit.enable = true;
  services.pipewire = {
    enable = true;
    alsa.enable = true;
    alsa.support32Bit = true;
    pulse.enable = true;
  };
#+end_src
** Shell
#+name: shell
#+begin_src nix
    programs.zsh.enable = true;
    environment.shells = with pkgs; [ zsh ];
#+end_src
** User
#+name: user
#+begin_src nix
    users.users.adham = {
      isNormalUser = true;
      description = "adham";
      extraGroups = [
	"networkmanager" "wheel" "adbusers" "video" "docker"
      ];
      packages = with pkgs; [
	firefox
      ];
      shell = pkgs.zsh;
    };

    ## Related to Wayland support
    environment.sessionVariables.NIXOS_OZONE_WL = "1";
#+end_src

** GnuPG
#+name: gpg
#+begin_src nix
    programs.gnupg.agent = {
      enable = true;
      enableSSHSupport = true;
      pinentryFlavor = "gtk2";
    };
#+end_src
** SSH
Enable the OpenSSH daemon.
#+name: ssh
#+begin_src nix
    services.openssh.enable = true;
#+end_src
** Firewall
This does not get tangled.

Open ports in the firewall.
#+begin_src nix
  networking.firewall.allowedTCPPorts = [ ... ];
  networking.firewall.allowedUDPPorts = [ ... ];
  # Or disable the firewall altogether.
  networking.firewall.enable = false;
#+end_src
** Version
This value determines the NixOS release from which the default settings for
stateful data, like file locations and database versions on your system were
taken. Itâs perfectly fine and recommended to leave this value at the release
version of the first install of this system.  Before changing this value read
the documentation for this option (e.g. man configuration.nix or on
https://nixos.org/nixos/options.html).
#+name: version
#+begin_src nix
    system.stateVersion = "23.05";
#+end_src
** Nix
Allow unfree packages
#+name: nix-unfree
#+begin_src nix
  nixpkgs.config.allowUnfree = true;
#+end_src

Enable flakes
#+name: nix-flake
#+begin_src nix
    nix = {
	package = pkgs.nixFlakes;
	extraOptions = "experimental-features = nix-command flakes";
      };

#+end_src
Use the beta cache.
#+name: nix-cache
#+begin_src nix
    nix.settings.substituters = [ "https://aseipp-nix-cache.freetls.fastly.net" ];
#+end_src

Nix store optimization
#+name: nix-store
#+begin_src nix
    nix.settings.auto-optimise-store = true;
#+end_src

Garbage collection. Delete every week any generation that's older than 7 days.
#+name: nix-gc
#+begin_src nix
    nix.gc = {
      automatic = true;
      dates = "weekly";
      options = "--delete-older-than 7d";
    };
#+end_src
** Closing bracket
So that I don't worry about closing the outer-most pair of brackets.
#+begin_src nix

#+end_src
* modules
** packages
#+begin_src nix :tangle modules/packages.nix
  { config, pkgs, callPackage, lib, ... }:
#+end_src

#+begin_src nix :tangle modules/packages.nix
  {
    environment.systemPackages = with pkgs; [
      unzip
      cmatrix
      libsForQt5.okular
      rsync

      mpd
      mpc-cli

      openssl
      pinentry
      pinentry-gtk2
      syncthing
      killall
#+end_src

Packages that GNOME requires.
#+begin_src nix :tangle modules/packages.nix
     gnome.adwaita-icon-theme
     gnomeExtensions.appindicator
#+end_src

Extend ~emacsUnstable~ with packages. ~vterm~ will not work untless this code is here.
#+begin_src nix :tangle modules/packages.nix
  ((emacsPackagesFor emacsUnstable).emacsWithPackages (epkgs:
    [
	    epkgs.vterm
	    epkgs.jinx
    ]))
  ];

#+end_src

In the last two weeks as of [2023-05-29 Mon] I needed to add this to update.
#+begin_src nix :tangle modules/packages.nix
    nixpkgs.config.permittedInsecurePackages = [
      "nodejs-16.20.0"
    ];
  }
#+end_src
** mpd
#+begin_src nix :noweb yes :tangle modules/mpd.nix
  {...}:
  {
    services.mpd = {
      enable = true;
      musicDirectory = "/home/adham/music";
      extraConfig = ''
      <<mpd_config>>
      '';

      <<mpd_optional>>

      <<mpd_socket>>
    };
  }
#+end_src

MPD Configuration, you must specify one or more outputs in order to play audio.
#+name: mpd_config
#+begin_src conf :tangle no
      audio_output {
	type "pipewire"
	name "My PipeWire Output"
      }
#+end_src


The following is optional, the ~listenAddress~ enables non-localhost connections
while ~startWhenNeeded~ makes it so the MPD service only starts upon connection to
its socket.
#+name: mpd_optional
#+begin_src nix
  network.listenAddress = "any";
  startWhenNeeded = true;
  };
#+end_src
https://gitlab.freedesktop.org/pipewire/pipewire/-/issues/609

User-id 1000 must match above user. MPD will look inside this directory for the
PipeWire socket.
#+name: mpd_socket
#+begin_src nix
  services.mpd.user = "userRunningPipeWire";
  systemd.services.mpd.environment = {
    XDG_RUNTIME_DIR = "/run/user/1000";
#+end_src
** kanata
:PROPERTIES:
:header-args: :tangle modules/kanata.nix
:END:
#+begin_src nix
  { config, pkgs, callPackage, lib, ... }:
  {
    services.kanata.enable = true;
    services.kanata.package = pkgs.kanata;

    services.kanata.keyboards.usb.devices = [
      "/dev/input/by-id/usb-SONiX_USB_DEVICE-event-kbd" ## external keyboard
      "/dev/input/by-path/platform-i8042-serio-0-event-kbd"
    ];

    services.kanata.keyboards.usb.config = ''
#+end_src

#+begin_src lisp
  (defvar
    tap-timeout   150
    hold-timeout  150
    tt $tap-timeout
    ht $hold-timeout
    )

  (defalias
    qwt (layer-switch qwerty)
    col (layer-switch colemak)
    a (tap-hold $tt $ht a lmet)
    r (tap-hold $tt $ht r lalt)
    s (tap-hold $tt $ht s lctl)
    t (tap-hold $tt $ht t lsft)

    n (tap-hold $tt $ht n rsft)
    e (tap-hold $tt $ht e rctl)
    i (tap-hold $tt $ht i ralt)
    o (tap-hold $tt $ht o rmet)

    0 (tap-hold $tt $ht 0 M-0)
    1 (tap-hold $tt $ht 1 M-1)
    2 (tap-hold $tt $ht 2 M-2)
    3 (tap-hold $tt $ht 3 M-3)
    4 (tap-hold $tt $ht 4 M-4)
    5 (tap-hold $tt $ht 5 M-5)
    6 (tap-hold $tt $ht 6 M-6)
    7 (tap-hold $tt $ht 7 M-7)
    8 (tap-hold $tt $ht 8 M-8)
    9 (tap-hold $tt $ht 9 M-9)
    )

  (defsrc
      esc  f1   f2   f3   f4   f5   f6   f7   f8   f9   f10  f11  f12  del
      grv  1    2    3    4    5    6    7    8    9    0    -    =    bspc
      tab  q    w    e    r    t    y    u    i    o    p    [    ]    \
      caps a    s    d    f    g    h    j    k    l    ;    '    ret
      lsft z    x    c    v    b    n    m    ,    .    /    rsft
      lctl lmet lalt           spc            ralt    rctl
      )

  (deflayer colemak
      esc  f1   f2   f3   f4   f5   f6   f7   f8   f9   f10  f11  f12  del
      grv  @1   @2   @3   @4   @5   @6   @7   @8   @9   @0    -    =    bspc
      tab  q    w    f    p    g    j    l    u    y    ;    [    ]    \
      caps @a   @r   @s  @t    d    h   @n   @e   @i    @o    '    ret
      lsft z    x    c    v    b    k    m    ,    .    /    rsft
      lctl lmet lalt           spc            @qwt    rctl
      )

  (deflayer qwerty
      esc  f1   f2   f3   f4   f5   f6   f7   f8   f9   f10  f11  f12  del
      grv  1    2    3    4    5    6    7    8    9    0    -    =    bspc
      tab  q    w    e    r    t    y    u    i    o    p    [    ]    \
      caps a    s    d    f    g    h    j    k    l    ;    '    ret
      lsft z    x    c    v    b    n    m    ,    .    /    rsft
      lctl lmet lalt           spc            @col    rctl
      )
#+end_src

#+begin_src nix
    '';
  }
#+end_src
** fonts
~vazir-fonts~ is a [[https://rastikerdar.github.io/vazirmatn/en][Persian-Arabic typeface family]].

~fontconfig~ tells the system which font to use system-wide.
#+begin_src nix :tangle modules/fonts.nix
  { config, pkgs, callPackage, lib, ... }:
  {
    fonts = {
      enableDefaultFonts = true;
      fonts = with pkgs; [
	noto-fonts
	noto-fonts-cjk
	noto-fonts-emoji
	font-awesome
	fira-code
	fira-code-symbols
	scheherazade-new

	source-han-sans
	source-han-sans-japanese
	source-han-serif-japanese

	vazir-fonts
      ];

      fontconfig = {
	defaultFonts = {
	  serif = [ "Noto Sans" "Noto Naskh Arabic"];
	  sansSerif = [ "Noto Sans" "Noto Naskh Arabic" ];
	  monospace = [ "Fira Code" ];
	};
      };
    };
  }
#+end_src
** sway
#+begin_src nix :tangle modules/sway.nix :noweb yes
  { config, pkgs, lib, ... }:
  let
    dbus-sway-environment = pkgs.writeTextFile {
      name = "dbus-sway-environment";
      destination = "/bin/dbus-sway-environment";
      executable = true;

      text = ''
      <<sway_script>>
	  '';
    };
  in
  <<sway_programs>>
#+end_src

#+name: sway_script
#+begin_src conf
  dbus-update-activation-environment --systemd WAYLAND_DISPLAY XDG_CURRENT_DESKTOP=sway
  systemctl --user stop pipewire pipewire-media-session xdg-desktop-portal xdg-desktop-portal-wlr
  systemctl --user start pipewire pipewire-media-session xdg-desktop-portal xdg-desktop-portal-wlr
#+end_src

#+name: sway_programs
#+begin_src nix
  {
    programs.sway = {
      enable = true;
      wrapperFeatures.gtk = true;
    };

    xdg.portal = {
      enable = true;
      wlr.enable = true;
    };

    services.dbus.enable = true;
    environment.systemPackages = with pkgs; [
      dbus-sway-environment
      waybar
    ];
  }
#+end_src

** hyprland
:PROPERTIES:
:header-args: :tangle modules/hyprland.nix
:END:

#+begin_src nix
  { config, pkgs, lib, ... }:
  {
    programs.hyprland.enable = true;

    environment.systemPackages = with pkgs; [
      hyprland
      hyprland-protocols
      hyprland-share-picker
      hyprpaper
      xdg-desktop-portal-hyprland
      waybar
    ];
  }
#+end_src

** overlays
:PROPERTIES:
:header-args: :tangle modules/overlays.nix
:END:

#+begin_src nix
  { config, pkgs, callPackage, lib, ... }:
  {
    nixpkgs.overlays = [

#+end_src
*** Waybar
#+begin_src nix :tangle no
      (self: super: {
	waybar = super.waybar.overrideAttrs (oldAttrs: {
	  mesonFlags = oldAttrs.mesonFlags ++ [ "-Dexperimental=true" ];
	});
      })
#+end_src
*** Emacs
Overlay Emacs for latest release.
#+begin_src nix
      (import (builtins.fetchTarball {
	url = https://github.com/nix-community/emacs-overlay/archive/master.tar.gz;
	sha256 = "1m7qzrg7cgsf7l4caz71q1yjngyr48z9n8z701ppbdzk66ydfjfm";
      }))
    ];
#+end_src

#+begin_src nix
  }
#+end_src

** power management
:PROPERTIES:
:header-args: :tangle modules/power.nix
:END:

Power configuration for T480
#+begin_src nix
  { config, pkgs, callPackage, lib, ... }:
  {
    services.power-profiles-daemon.enable = false;
    services.tlp = {
      enable = true;

      settings = {
	START_CHARGE_THRESH_BAT0=75;
	STOP_CHARGE_THRESH_BAT0=95;

	START_CHARGE_THRESH_BAT1=75;
	STOP_CHARGE_THRESH_BAT1=95;

	CPU_SCALING_GOVERNOR_ON_AC = "performance";
	CPU_SCALING_GOVERNOR_ON_BAT = "powersave";
      };
    };
  }

#+end_src

** tmux
:PROPERTIES:
:header-args: :tangle modules/tmux.nix
:END:

#+begin_src nix
  { pkgs, config, ... }:
  {
    programs.tmux = {
      enable = true;

#+end_src

#+begin_src nix :tangle no
      # shortcut = "a";
      # aggressiveResize = true; -- Disabled to be iTerm-friendly
      # baseIndex = 1;
      # newSession = true;
      # Stop tmux+escape craziness.
      # escapeTime = 0;
      # Force tmux to use /tmp for sockets (WSL2 compat)
      # secureSocket = false;
#+end_src

#+begin_src nix
      plugins = with pkgs; [
	tmuxPlugins.better-mouse-mode
      ];

      extraConfig = ''
#+end_src

https://old.reddit.com/r/tmux/comments/mesrci/tmux_2_doesnt_seem_to_use_256_colors/
#+begin_src conf
      set -g default-terminal "xterm-256color"
      set -ga terminal-overrides ",*256col*:Tc"
      set -ga terminal-overrides '*:Ss=\E[%p1%d q:Se=\E[ q'
      set-environment -g COLORTERM "truecolor"
#+end_src

Mouse configuration
#+begin_src conf :tangle no
  set-option -g mouse on
#+end_src

*** Keybindings
Split pane commands
#+begin_src conf :tangle no
  bind | split-window -h -c "#{pane_current_path}"
  bind - split-window -v -c "#{pane_current_path}"
  bind c new-window -c "#{pane_current_path}"
#+end_src

#+begin_src nix
      '';
    };
  }
#+end_src

** virtualization
:PROPERTIES:
:header-args: :tangle modules/virtualization.nix
:END:
#+begin_src nix
  { pkgs, lib, ... }:
  {
    virtualisation = {
      docker.enable = true;
      waydroid.enable = true;
      lxd.enable = true;
      libvirtd.enable = true;
    };

    programs.adb.enable = true;
    programs.dconf.enable = true;
    environment.systemPackages = with pkgs; [ virt-manager ];
    users.users.adham.extraGroups = [ "libvirtd" ];
  }
#+end_src
** KDE
:PROPERTIES:
:header-args: :tangle modules/kde.nix
:END:

#+begin_src nix
  { config, pkgs, callPackage, lib, ... }:
  {

    services.xserver.displayManager.sddm.enable = true;
    services.xserver.desktopManager.plasma5.enable = true;

#+end_src

Remove KDE apps.
#+begin_src nix
    environment.plasma5.excludePackages = with pkgs.libsForQt5; [
      elisa
    ];
  }
#+end_src

** GNOME
:PROPERTIES:
:header-args: :tangle modules/gnome.nix
:END:
#+begin_src nix
  { config, pkgs, callPackage, lib, ... }:
  {
    services.xserver.displayManager.gdm.enable = true;
    services.xserver.desktopManager.gnome.enable = true;
    services.udev.packages = with pkgs; [ gnome.gnome-settings-daemon ];
    programs.dconf.enable = true;
#+end_src
Exclude the following packages
| Package          | Description               |
|------------------+---------------------------|
| nautilus         | Files, replaced with Nemo |
| cheese           | Webcam tool               |
| gnome-music      | Music player              |
| gnome-terminal   | Terminal                  |
| gedit            | Text editor               |
| epiphany         | Web browser               |
| geary            | Email reader              |
| gnome-characters | -                         |
| totem            | Video player              |
| tali             | Poker game                |
| iagno            | Go game                   |
| hitori           | Sudoku game               |
| atomix           | Puzzle game               |
#+begin_src nix
    environment.gnome.excludePackages = (with pkgs; [
      gnome-photos
      gnome-tour
    ]) ++ (with pkgs.gnome; [
      nautilus
      cheese
      gnome-music
      gnome-terminal
      gedit
      epiphany
      geary
      gnome-characters
      totem
      tali
      iagno
      hitori
      atomix
    ]);
  }
#+end_src
* cachix
:PROPERTIES:
:header-args: :tangle cachix.nix
:END:

Note that this file will get overwritten by ~cachix use <name>~.
#+begin_src nix
  { pkgs, lib, ... }:
  let
    folder = ./cachix;
    toImport = name: value: folder + ("/" + name);
    filterCaches = key: value: value == "regular" && lib.hasSuffix ".nix" key;
    imports = lib.mapAttrsToList toImport (lib.filterAttrs filterCaches (builtins.readDir folder));
  in {
    inherit imports;
    nix.settings.substituters = ["https://cache.nixos.org/"];
  }
#+end_src
