#+TITLE: NixOS Configuration
#+OPTIONS: toc:3
#+AUTO_TANGLE: t
#+PROPERTY: header-args :results silent
#+STARTUP: overview

* Overview
My NixOS configuration flake so far.

** What I use
| Description     | Software        |
|-----------------+-----------------|
| Window Manager  | i3              |
| Bar             | i3status        |
| Editor          | Emacs           |
| Terminal        | xterm           |
| Browser         | Firefox         |
| Launcher        | rofi            |
| Notify server   | dunst           |
| Monitor manager | arandr          |
| Screenshot      | scrot/flameshot |
| Bluetooth       | blueman         |
| Screencast      | ffcast          |

This is an X11 setup as I currently have no plan on using Wayland due to the
issue I faced with it and no need to switch.

* Usage
These are my ideas about how I use my system.  The Nix ecosystem is based on the
idea of reproducible builds and deployment.  Nix is the language and there's
also the Nix package manager, NixOS is a linux distrubution based on Nix,
Nixpkgs are the the Nix packages, about 80,000 packages.
** NixOS as a stable workstation

My idea for a stable workstation is like a set of layers, on the base there's
the operating system, NixOS.  Above that is the window manager or desktop
environment which is i3 in my case.  Above that are the packages installed by
Nix and lastly the packages installed by Flatpak.
** Flatpack for applications
Currently I run the following applications from Flathub
| Application | Description                  |
|-------------+------------------------------|
| Anki        | Spaced Repetition System     |
| darktable   | Photo library management     |
| LibreOffice | Office Suite                 |
| Zotero      | Citation and PDF management  |
| Element     | Chat client for Matrix       |
| Sioyek      | PDF reader                   |
| Rnote       | Handwritten notes with Wacom |
| qBittorrent | Torrent client               |
*** Why use Flatpak?
- More up to date packages without having an unstable system.
- Usually packaged by the developers themselves.
*** Why not use Flatpak?
As of writing ([2023-06-17 Sat]) there's no way builtin way to declare Flatpak
packages, there's [[https://github.com/yawnt/declarative-nix-flatpak][ywant/declarative-nix-flatpak]] but I have not tested it.
** Development in Nix Flakes
Currently I have flakes setup for personal development in R and C.
** Development in Distrobox
I use an Ubuntu 22.04.02 LTS box for quick R development for work.  I don't
always use this as I do most of the work over SSH.
* Literate Configuration
My entire configuration is one ~org-mode~ file.

The pros of this setup are that you leverage all the power ~org-mode~ already
offers for navigation of one document through subtrees. Second it allows the
~extraCongif~ argument to be configured in the correct language. Last and
certainly not least it enables reuse of code blocks and outright disabling code
without commenting it out.

The cons of such setup is the time required to learn ~org-mode~ if you do not use
it and the initial setup.

** Style
I use the [[https://orgmode.org/manual/Noweb-Reference-Syntax.html][noweb]] reference syntax for my code blocks. The structure at the moment
is:

1. One main block into which everything is included.
2. Any number of named code blocks with their documentation and any other
   comments. These can be ~:noweb~ blocks themselves.

This style avoids any need to include ~:tangle~ more than once.
* Future Concerns
Concerns for topics that are more than one year away. These do not affect the
current configuration.
** VFIO
In the future I want to build a PC with the goal of VFIO passthrough, I have
found a few guides but have not tested any myself.

If I can't make it work I'll just dual boot with Windows.
*** Resources
- [[https://nixos.wiki/wiki/PCI_passthrough][PCI passthrough - NixOS Wiki]]
- [[https://gist.github.com/CRTified/43b7ce84cd238673f7f24652c85980b3][VFIO Passthrough on NixOS Â· GitHub (2019-2021)]]
- [[https://forum.level1techs.com/t/nixos-vfio-pcie-passthrough/130916][NixOS VFIO PCIe Passthrough - Wikis & How-to Guides - Level1Techs Forums (2018-2022)]]
- [[https://astrid.tech/2022/09/22/0/nixos-gpu-vfio/][A GPU Passthrough Setup  for NixOS (with VR passthrough too!) | astrid.tech (2022-09-22)]]
*** Last Resort
- [ ] Can this be done with ~virt-manager~ installed inside an Arch Linux ~distrobox~?

* flake
Most newer configurations are a flake, although an experimental feature at the
moment. They offer a lot of potential with the few interactions I've had with
them so far.

I'm running the latest stable which is ~23.05~ with [[https://nixos.wiki/wiki/Home_Manager][home-manager]] in my flake. I
find the separation between the user and the system quite interesting not to
mention the power of declarative dotfiles.

#+name: inputs
#+begin_src nix
  nixpkgs.url = "github:nixos/nixpkgs/nixos-23.05";
  home-manager = {
	  url = "github:nix-community/home-manager";
	  inputs.nixpkgs.follows = "nixpkgs";
  };
#+end_src

#+begin_src nix :tangle flake.nix :noweb yes
  {
    description = "Adham's System Flake";

    inputs =
      {
	<<inputs>>
      };

    outputs = { self, nixpkgs, home-manager, ... }@inputs:
      let
	system = "x86_64-linux";
	pkgs = import nixpkgs {
		inherit system;
		config.allowUnfree = true;
	};
	lib = nixpkgs.lib;
      in {
	nixosConfigurations = {
		nixos = lib.nixosSystem {
			inherit system;
			modules = [
			  ./configuration.nix
			  home-manager.nixosModules.home-manager {
			    home-manager.useGlobalPkgs = true;
			    home-manager.useUserPackages = true;
			    home-manager.users.adham = {
				    imports = [ ./home.nix ];
			    };
			  }
			];
		};
	};
      };
  }

#+end_src

* home-manger
#+begin_src nix :tangle home.nix :noweb yes
  {config, pkgs, lib, ...}:
  let
    <<default-apps>>
  in
  {
    home = {
      stateVersion = "23.05";
      packages = with pkgs; [
	<<remote-control>>
	<<video-audio>>
	<<clojure>>
	<<cli>>
	<<password-managers>>
	<<applications>>
	<<gtk-themes>>
	<<x11-utilities>>
      ];
    };
    <<picom>>
    <<mpd-home>>
    <<mpdris2>>
    <<home-manager-programs>>
    <<home-manager-gtk-theme>>
    <<mimeapps>>
  }
#+end_src
** GTK Themes
This is based on this article: [[https://hoverbear.org/blog/declarative-gnome-configuration-in-nixos/][Declarative GNOME configuration with NixOS]]

The themes I use
#+name: gtk-themes
#+begin_src text
  paper-gtk-theme
  pop-gtk-theme
  gnome.adwaita-icon-theme
#+end_src

#+name: home-manager-gtk-theme
#+begin_src nix
  gtk = {
    enable = true;

    iconTheme = {
      name = "Papirus-Dark";
      package = pkgs.papirus-icon-theme;
    };

    theme = {
      name = "palenight";
      package = pkgs.palenight-theme;
    };

    cursorTheme = {
      name = "Quintom_Ink";
      package = pkgs.quintom-cursor-theme;
    };

    gtk3.extraConfig = {
      Settings = ''
	gtk-application-prefer-dark-theme=1
	gtk-cursor-theme-size=20
      '';
    };

    gtk4.extraConfig = {
      Settings = ''
	gtk-application-prefer-dark-theme=1
      '';
    };
  };

  home.sessionVariables.GTK_THEME = "palenight";
#+end_src

** Programs
#+name: home-manager-programs
#+begin_src nix
  programs.git = {
    enable = true;
    userName  = "adham-omran";
    userEmail = "git@adham-omran.com";
    signing = {
	    signByDefault = true;
	    key = "4D37E0ADEE0B9138";
    };
  };

  programs.ncmpcpp = {
    enable = true;
    mpdMusicDir = "/home/adham/music";
    settings = {
      mpd_host = "127.0.0.1";
      mpd_port = 9900;
      execute_on_song_change = "notify-send \"Now Playing\" \"$(mpc -p 9900 --format '%title% \\n%artist% - %album%' current)\"";
    };
  };

  services.blueman-applet.enable = true;
#+end_src
** Applications
General applications. ~foliate~ is what I use to read E-Books and ~poedit~ is a
translation editor. ~zathura~ is my PDF reader. ~nemo~ is my file manager.
#+name: applications
#+begin_src text
  gnome.gnome-tweaks

  xournalpp

  google-chrome

  libsForQt5.kcalc
  libsForQt5.kclock

  obs-studio
  poedit
  foliate
  zathura
  cinnamon.nemo
  krusader

  discord
  telegram-desktop
  spotify
#+end_src
** Command Line Programs
General CLI utilities. ~gtk3~ to provide ~gtk-launch~ which is used to launch
applications from Emacs with ~emacs-run-launcher~ although I rarely use this.

[[https://github.com/89luca89/distrobox][Distrobox]] is awesome. A lot of potential.

Since I'm back on X11 I could use [[https://github.com/rvaiya/warpd/][warpd]] to reduce my mouse usage even more. I
have to set it up again though.

~poppler_utils~ is related to Emacs's PDF reader but I am not sure if I even need
it here. I'll keep it for now.
#+name: cli
#+begin_src text
  isync
  msmtp
  afew
  notmuch

  mpc-cli

  texlive.combined.scheme-full
  eww

  poppler_utils

  warpd
  distrobox

  hunspell
  hunspellDicts.en_US

  yt-dlp
  gnuplot
  libnotify
  direnv
  gtk3
  graphviz
  openssl
  git
  stow
  tree
  ledger
  neofetch
  bat
  htop
  btop
  fd
  dmidecode
  powertop
  wget
  brightnessctl
  pavucontrol
  pfetch
#+end_src

#+name: video-audio
#+begin_src text
  mpv
  ffmpeg
  qpwgraph
  playerctl
  ncmpcpp
#+end_src

#+name: password-managers
#+begin_src text
  pass
  bitwarden
#+end_src
** X11
The following are X11 utilities.
#+name: x11-utilities
#+begin_src text
  arandr
  flameshot
  scrot
  xclip
  xsel
  feh
  dunst
  rofi
  ffcast
  xss-lock
  networkmanagerapplet
#+end_src
*** picom
#+name: picom
#+begin_src nix
  services.picom = {
    enable = true;
    vSync = true;
    backend = "glx";
  };
#+end_src
** Clojure
Currently I have Clojure installed on the user level, I want to move this into a
flake at some point.
#+name: clojure
#+begin_src text
  clojure
  babashka
  leiningen
  clojure-lsp
#+end_src

** Music
I use the [[https://www.musicpd.org/][music player daemon (mpd)]] for my local music and Spotify for the music
I stream. I control ~mpd~ using ~mpdris2~.
*** mpd
#+name: mpd-home
#+begin_src nix :noweb yes
  services.mpd = {
    enable = true;
    musicDirectory = "/home/adham/music";
    network.port = 9900;
    extraConfig = ''
    <<mpd_config>>
    '';

    <<mpd_optional>>
#+end_src

MPD Configuration, you must specify one or more outputs in order to play audio.
#+name: mpd_config
#+begin_src conf
  audio_output {
  type "pipewire"
  name "My PipeWire Output"
  }
#+end_src

The following is optional, the ~listenAddress~ enables non-localhost connections
while ~startWhenNeeded~ makes it so the MPD service only starts upon connection to
its socket.
#+name: mpd_optional
#+begin_src nix
  network.listenAddress = "any";
  network.startWhenNeeded = true;
  };
#+end_src
https://gitlab.freedesktop.org/pipewire/pipewire/-/issues/609

User-id 1000 must match above user. MPD will look inside this directory for the
PipeWire socket.
#+name: mpd
#+begin_src nix
  services.mpd.user = "userRunningPipeWire";
  systemd.services.mpd.environment = {
    XDG_RUNTIME_DIR = "/run/user/1000";
  };
#+end_src
*** mpdris2
#+name: mpdris2
#+begin_src nix
  services.mpdris2 = {
    enable = true;
    mpd.host = "127.0.0.1";
    mpd.port = 9900;
  };
#+end_src
** Using a DSLR Camera as a webcam
This setup is not active at the moment. Although from 30 minutes of testing I
found that the ~mptlvcap~ package which I install in an Arch-distrobox works
better than the ~gphoto2~ application.
#+begin_src text
  gphoto2
#+end_src

** Controlling another computer
~barrier~ does not work at the moment for unknown reasons.

I am using the sunshine server on another machine that dual boots Windows and
Debian 12 and running Moonlight to access it.
#+name: remote-control
#+begin_src text
  sunshine
  moonlight-qt
  barrier
#+end_src
** Setting default applications
- [[https://discourse.nixos.org/t/set-default-application-for-mime-type-with-home-manager/17190][Set default application for mime type with home-manager - Help - NixOS Discourse]]
- This conflicts with ~~/.config/mimeapps.list~. Use either this method or rely on
  the desktop environment to do it.

#+name: default-apps
#+begin_src nix
  pdf-app="org.pwmt.zathura.desktop";
  img-app="feh.desktop";
  browser-app="firefox.desktop";
#+end_src

#+name: mimeapps
#+begin_src nix
  xdg.mimeApps = {
    enable = true;
    associations.added = {

    };
    defaultApplications = {
      "x-scheme-handler/http"=["${browser-app}"];
      "x-scheme-handler/https"=["${browser-app}"];
      "x-scheme-handler/chrome"=["${browser-app}"];
      "text/html"=["${browser-app}"];
      "application/x-extension-htm"=["${browser-app}"];
      "application/x-extension-html"=["${browser-app}"];
      "application/x-extension-shtml"=["${browser-app}"];
      "application/xhtml+xml"=["${browser-app}"];
      "application/x-extension-xhtml"=["${browser-app}"];
      "application/x-extension-xht"=["${browser-app}"];

      "application/pdf" = ["${pdf-app}"];
      "image/bmp"= ["${img-app}"];
      "image/gif"=["${img-app}"];
      "image/jpg"=["${img-app}"];
      "image/pjpeg"=["${img-app}"];
      "image/png"=["${img-app}"];
      "image/tiff"=["${img-app}"];
      "image/webp"=["${img-app}"];
      "image/x-bmp"=["${img-app}"];
      "image/x-gray"=["${img-app}"];
      "image/x-icb"=["${img-app}"];
      "image/x-ico"=["${img-app}"];
      "image/x-png"=["${img-app}"];
      "image/x-portable-anymap"=["${img-app}"];
      "image/x-portable-bitmap"=["${img-app}"];
      "image/x-portable-graymap"=["${img-app}"];
      "image/x-portable-pixmap"=["${img-app}"];
      "image/x-xbitmap"=["${img-app}"];
      "image/x-xpixmap"=["${img-app}"];
      "image/x-pcx"=["${img-app}"];
      "image/svg+xml"=["${img-app}"];
      "image/svg+xml-compressed"=["${img-app}"];
      "image/vnd.wap.wbmp"=["${img-app}"];
      "image/x-icns"=["${img-app}"];
      "x-scheme-handler/element"=["element-desktop.desktop"];
    };
  };
#+end_src
** Dotfiles
I have not yet configured everything using home-manager. There are 3 options to
use home-manager for dotfiles.
1. Using home-manager options.
2. Directly pointing to a file.

   #+begin_src nix
     xdg.configFile."i3blocks/config".source = ./i3blocks.conf;
   #+end_src
   This will create symlink ~$XDG_CONFIG_HOME/i3blocks/config~.

3. Directly writing the configuration

   #+begin_src nix
     home.file.".gdbinit".text = ''
	 set auto-load safe-path /nix/store
     '';
   #+end_src
   This will create ~~/.gdbinit~.

   Do note that I can directly into a code block with the proper syntax.


My only concern is that when I move programs into this style it'll be harder to
hot-reload their configuration, sacrificing that for a more modular system.
*** TODO Programs to move
**** TODO warpd
**** TODO i3
**** TODO emacs
* configuration.nix
Edit this configuration file to define what should be installed on your system.
Help is available in the ~configuration.nix(5)~ man page and in the NixOS manual
(~nixos-help~).
#+begin_src nix :tangle configuration.nix :noweb yes
  { config, pkgs, callPackage, lib, ... }:
  {
    imports =
      [
		    <<modules>>
      ];
    <<config-boot>>
    <<config-networking>>
    <<config-timezone>>
    <<x11>>
    <<i3>>
    <<desktop-environment>>
    <<dwm>>
    <<services>>
    <<audio>>
    <<shell>>
    <<user>>
    <<gpg>>
    <<ssh>>
    <<packages>>
    <<mpd>>
    <<kanata>>
    <<fonts>>
    <<tmux>>
    <<power>>
    <<virtualization>>
    <<version>>
    <<nix-unfree>>
    <<nix-flake>>
    <<nix-cache>>
    <<nix-store>>
    <<nix-gc>>
    <<opengl>>
    <<systemd-timers>>
    <<systemd>>
  }
#+end_src
** Imports
#+name: modules
#+begin_src nix
  ./hardware-configuration.nix
    ./cachix.nix
#+end_src
** Boot
#+name: config-boot
#+begin_src nix
  boot.loader.systemd-boot.enable = true;
  boot.loader.efi.canTouchEfiVariables = true;
  boot.loader.efi.efiSysMountPoint = "/boot/efi";

  boot.extraModulePackages = with config.boot.kernelPackages; [
    v4l2loopback
  ];

  networking.hostName = "nixos";
#+end_src

Do not tangle.
- Enables wireless support via wpa_supplicant.
- Configure network proxy if necessary
#+begin_src nix
  networking.wireless.enable = true;

  networking.proxy.default = "http://user:password@proxy:port/";
  networking.proxy.noProxy = "127.0.0.1,localhost,internal.domain";
#+end_src

Enable networking
#+name: config-networking
#+begin_src nix
  networking.networkmanager.enable = true;
#+end_src


- Set your time zone.
- Set internationalization properties.
#+name: config-timezone
#+begin_src nix
  time.timeZone = "Asia/Baghdad";
  i18n.defaultLocale = "en_US.UTF-8";
#+end_src
** Desktop Environment
I currently use GNOME.

#+name: desktop-environment
#+begin_src nix :noweb yes
  services.xserver.desktopManager = {
    gnome.enable = true;
    plasma5.enable = false;
  };

  services.udev.packages = with pkgs; [ gnome.gnome-settings-daemon ];
  programs.dconf.enable = true;
  <<package-exclusion>>
#+end_src

Exclude the following packages
| Package          | Description               |
|------------------+---------------------------|
| nautilus         | Files, replaced with Nemo |
| cheese           | Webcam tool               |
| gnome-music      | Music player              |
| gnome-terminal   | Terminal                  |
| gedit            | Text editor               |
| epiphany         | Web browser               |
| geary            | Email reader              |
| gnome-characters | -                         |
| totem            | Video player              |
| tali             | Poker game                |
| iagno            | Go game                   |
| hitori           | Sudoku game               |
| atomix           | Puzzle game               |
#+name: package-exclusion
#+begin_src nix
  environment = {
    plasma5.excludePackages = with pkgs.libsForQt5; [
      elisa
    ];

    gnome.excludePackages = (with pkgs; [
      gnome-photos
      gnome-tour
    ]) ++ (with pkgs.gnome; [
      nautilus
      cheese
      gnome-music
      gnome-terminal
      gedit
      epiphany
      geary
      gnome-characters
      totem
      tali
      iagno
      hitori
      atomix
    ]);
  };
#+end_src
** Window Manager
- Enable the X11 windowing system.
- Configure keymap in X11
#+name: x11
#+begin_src nix
  services.xserver = {
    enable = true;
    layout = "us";
  };

#+end_src

Enable the i3 window manager and install related packages.

I have not found a bar other than i3's which supports multi-monitor and requires
minimal setup. I want to explore ~i3blocks~ in the future.

- ~i3status~: Gives you the default i3 status bar.
- ~i3lock~: Default i3 screen locker.
- ~i3blocks~: If you are planning on using i3blocks over i3status.
#+name: i3
#+begin_src nix
  services.xserver.windowManager.i3 = {
    enable = true;
    package = pkgs.i3-gaps;
    extraPackages = with pkgs; [
      i3status
      i3lock
      i3blocks
    ];
  };

  services.xserver.windowManager.dwm.enable = true;

#+end_src
*** dwm
I plan to learn ~C~ at some point in the future and the ~dwm~ project could be an
interesting one to explore.

#+name: dwm
#+begin_src nix
  nixpkgs.overlays = [
    (final: prev: {
      dwm = prev.dwm.overrideAttrs (old: { src = /home/adham/code/suckless/dwm ;});
      slstatus = prev.slstatus.overrideAttrs (old: { src = /home/adham/code/suckless/slstatus ;});
    })
  ];
#+end_src
** Services
- ~light~: Light backlight control command
- [[https://nixos.wiki/wiki/Polkit][Polkit - NixOS Wiki]].
- Make sure to configure the ~syncthing~ directory else it will not work.
#+name: services
#+begin_src nix
  programs.light.enable = true;
  security.polkit.enable = true;

  services.xserver.wacom.enable = true;
  services.printing.enable = true;
  hardware.bluetooth.enable = true;
  services.hardware.bolt.enable = true;
  services.tailscale.enable = true;

  services.flatpak.enable = true;
  fonts.fontDir.enable = true;
  xdg.portal =
    {
      enable = true;
    };

  services.syncthing = {
    enable = true;
    user = "adham";
    configDir = "/home/adham/.config/syncthing";
  };

  services.blueman.enable = true;

#+end_src

To enable touchpad support add ~services.xserver.libinput.enable = true;~.
** Audio
#+name: audio
#+begin_src nix
  sound.enable = true;
  hardware.pulseaudio.enable = false;
  security.rtkit.enable = true;
  services.pipewire = {
    enable = true;
    alsa.enable = true;
    alsa.support32Bit = true;
    pulse.enable = true;
  };
#+end_src
** Shell
#+name: shell
#+begin_src nix
  programs.zsh.enable = true;
  environment.shells = with pkgs; [ zsh ];
#+end_src
** User
#+name: user
#+begin_src nix
  users.users.adham = {
    isNormalUser = true;
    description = "adham";
    extraGroups = [
      "networkmanager" "wheel" "adbusers" "video" "docker" "libvirtd"
    ];
    packages = with pkgs; [
      firefox
    ];
    shell = pkgs.zsh;
  };
#+end_src
** GnuPG
#+name: gpg
#+begin_src nix
  programs.gnupg.agent = {
    enable = true;
    enableSSHSupport = true;
    pinentryFlavor = "gtk2";
  };
#+end_src
** SSH
#+name: ssh
#+begin_src nix
  services.openssh.enable = true;
#+end_src
** Firewall
This does not get tangled.

Open ports in the firewall.
#+begin_src nix
  networking.firewall.allowedTCPPorts = [ ... ];
  networking.firewall.allowedUDPPorts = [ ... ];
  # Or disable the firewall altogether.
  networking.firewall.enable = false;
#+end_src
** Version
This value determines the NixOS release from which the default settings for
stateful data, like file locations and database versions on your system were
taken. Itâs perfectly fine and recommended to leave this value at the release
version of the first install of this system.  Before changing this value read
the documentation for this option (e.g. man configuration.nix or on
https://nixos.org/nixos/options.html).
#+name: version
#+begin_src nix
  system.stateVersion = "23.05";
#+end_src
** Nix
Allow unfree packages
#+name: nix-unfree
#+begin_src nix
  nixpkgs.config.allowUnfree = true;
#+end_src

Enable flakes
#+name: nix-flake
#+begin_src nix
  nix = {
    package = pkgs.nixFlakes;
    extraOptions = "experimental-features = nix-command flakes";
  };

#+end_src
Use the beta cache.
#+name: nix-cache
#+begin_src nix
  nix.settings.substituters = [ "https://aseipp-nix-cache.freetls.fastly.net" ];
#+end_src

Nix store optimization
#+name: nix-store
#+begin_src nix
  nix.settings.auto-optimise-store = true;
#+end_src

Garbage collection. Delete every week any generation that's older than 7 days.
#+name: nix-gc
#+begin_src nix
  nix.gc = {
    automatic = true;
    dates = "weekly";
    options = "--delete-older-than 7d";
  };
#+end_src
** packages
#+name: packages
#+begin_src nix :noweb yes
  environment.systemPackages = with pkgs; [
    slstatus
    unzip
    cmatrix
    libsForQt5.okular
    rsync

    openssl
    pinentry
    pinentry-gtk2
    syncthing
    killall
    gnome.adwaita-icon-theme
    gnomeExtensions.appindicator
    virt-manager
    <<emacs-packages>>
#+end_src

** kanata
#+name: kanata
#+begin_src nix :noweb yes
  services.kanata.enable = true;
  services.kanata.package = pkgs.kanata;

  services.kanata.keyboards.usb.devices = [
    "/dev/input/by-id/usb-SONiX_USB_DEVICE-event-kbd" ## external keyboard
    "/dev/input/by-path/platform-i8042-serio-0-event-kbd"
  ];

  services.kanata.keyboards.usb.config = ''
  <<kanata-config>>
  '';
#+end_src

#+name: kanata-config
#+begin_src lisp
  (defvar
    tap-timeout   150
    hold-timeout  150
    tt $tap-timeout
    ht $hold-timeout
    )

  (defalias
    qwt (layer-switch qwerty)
    col (layer-switch colemak)
    a (tap-hold $tt $ht a lmet)
    r (tap-hold $tt $ht r lalt)
    s (tap-hold $tt $ht s lctl)
    t (tap-hold $tt $ht t lsft)

    n (tap-hold $tt $ht n rsft)
    e (tap-hold $tt $ht e rctl)
    i (tap-hold $tt $ht i ralt)
    o (tap-hold $tt $ht o rmet)

    0 (tap-hold $tt $ht 0 M-0)
    1 (tap-hold $tt $ht 1 M-1)
    2 (tap-hold $tt $ht 2 M-2)
    3 (tap-hold $tt $ht 3 M-3)
    4 (tap-hold $tt $ht 4 M-4)
    5 (tap-hold $tt $ht 5 M-5)
    6 (tap-hold $tt $ht 6 M-6)
    7 (tap-hold $tt $ht 7 M-7)
    8 (tap-hold $tt $ht 8 M-8)
    9 (tap-hold $tt $ht 9 M-9)
    )

  (defsrc
      esc  f1   f2   f3   f4   f5   f6   f7   f8   f9   f10  f11  f12  del
      grv  1    2    3    4    5    6    7    8    9    0    -    =    bspc
      tab  q    w    e    r    t    y    u    i    o    p    [    ]    \
      caps a    s    d    f    g    h    j    k    l    ;    '    ret
      lsft z    x    c    v    b    n    m    ,    .    /    rsft
      lctl lmet lalt           spc            ralt    rctl
      )

  (deflayer colemak
      esc  f1   f2   f3   f4   f5   f6   f7   f8   f9   f10  f11  f12  del
      grv  @1   @2   @3   @4   @5   @6   @7   @8   @9   @0    -    =    bspc
      tab  q    w    f    p    g    j    l    u    y    ;    [    ]    \
      caps @a   @r   @s  @t    d    h   @n   @e   @i    @o    '    ret
      lsft z    x    c    v    b    k    m    ,    .    /    rsft
      lctl lmet lalt           spc            @qwt    rctl
      )

  (deflayer qwerty
      esc  f1   f2   f3   f4   f5   f6   f7   f8   f9   f10  f11  f12  del
      grv  1    2    3    4    5    6    7    8    9    0    -    =    bspc
      tab  q    w    e    r    t    y    u    i    o    p    [    ]    \
      caps a    s    d    f    g    h    j    k    l    ;    '    ret
      lsft z    x    c    v    b    n    m    ,    .    /    rsft
      lctl lmet lalt           spc            @col    rctl
      )
#+end_src
** fonts
~vazir-fonts~ is a [[https://rastikerdar.github.io/vazirmatn/en][Persian-Arabic typeface family]].

~fontconfig~ tells the system which font to use system-wide.
#+name: fonts
#+begin_src nix
  fonts = {
    enableDefaultFonts = true;
    fonts = with pkgs; [
      noto-fonts
      noto-fonts-cjk
      noto-fonts-emoji
      font-awesome
      fira-code
      fira-code-symbols
      scheherazade-new
      jetbrains-mono
      hack-font

      source-han-sans
      source-han-sans-japanese
      source-han-serif-japanese

      vazir-fonts
    ];

    fontconfig = {
      defaultFonts = {
	serif = [ "Noto Sans" "Noto Naskh Arabic"];
	sansSerif = [ "Noto Sans" "Noto Naskh Arabic" ];
	monospace = [ "JetBrains Mono" ];
      };
    };
  };
#+end_src
** tmux
#+name: tmux
#+begin_src nix :noweb yes
  programs.tmux = {
    enable = true;

  plugins = with pkgs; [
    tmuxPlugins.better-mouse-mode
  ];

  extraConfig = ''
	    <<tmux-config>>
	      '';
};
#+end_src

https://old.reddit.com/r/tmux/comments/mesrci/tmux_2_doesnt_seem_to_use_256_colors/
#+name: tmux-config
#+begin_src conf
      set -g default-terminal "xterm-256color"
      set -ga terminal-overrides ",*256col*:Tc"
      set -ga terminal-overrides '*:Ss=\E[%p1%d q:Se=\E[ q'
      set-environment -g COLORTERM "truecolor"
#+end_src

** power management
Power configuration for T480
#+name: power
#+begin_src nix :noweb yes
  services.power-profiles-daemon.enable = false;
  services.tlp = {
    enable = true;

    settings = {
      START_CHARGE_THRESH_BAT0=75;
      STOP_CHARGE_THRESH_BAT0=95;

      START_CHARGE_THRESH_BAT1=75;
      STOP_CHARGE_THRESH_BAT1=95;

      CPU_SCALING_GOVERNOR_ON_AC = "performance";
      CPU_SCALING_GOVERNOR_ON_BAT = "powersave";
    };
  };
#+end_src

** virtualization
#+name: virtualization
#+begin_src nix
  virtualisation = {
    docker.enable = true;
    waydroid.enable = true;
    lxd.enable = true;
    libvirtd.enable = true;
  };

  programs.adb.enable = true;
#+end_src
** opengl
#+name: opengl
#+begin_src nix
  hardware.opengl = {
    enable = true;
    extraPackages = with pkgs; [
      intel-media-driver # LIBVA_DRIVER_NAME=iHD
      vaapiIntel         # LIBVA_DRIVER_NAME=i965 (older but works better for Firefox/Chromium)
      vaapiVdpau
      libvdpau-va-gl
    ];
  };
#+end_src
** cachix
:PROPERTIES:
:header-args: :tangle cachix.nix
:END:

Note that this file will get overwritten by ~cachix use <name>~.
#+begin_src nix
  { pkgs, lib, ... }:
  let
    folder = ./cachix;
    toImport = name: value: folder + ("/" + name);
    filterCaches = key: value: value == "regular" && lib.hasSuffix ".nix" key;
    imports = lib.mapAttrsToList toImport (lib.filterAttrs filterCaches (builtins.readDir folder));
  in {
    inherit imports;
    nix.settings.substituters = ["https://cache.nixos.org/"];
  }
#+end_src
** Emacs
Emacs is my main and only editor.

To use the overlay unstable use ~package = pkgs.emacsUnstable~.

#+name: emacs-variation
#+begin_src text
emacs29-pgtk
#+end_src

#+name: emacs
#+begin_src nix
services.emacs = {
    enable = true;
    package = pkgs.<<emacs-variation>>;
  };
#+end_src
For Emacs packages that need to be built, such as ~vterm~ and ~jinx~.
#+name: emacs-packages
#+begin_src nix :noweb yes
  ((emacsPackagesFor <<emacs-variation>>).emacsWithPackages (epkgs:
    [
	    epkgs.vterm
	    epkgs.jinx
    ]))
  ];
#+end_src

*** Overlay
The overlay is only for Emacs unstable and is currenly not in use, to use it add
~<<overlay>>~ to the noweb references.

#+name: overlays
#+begin_src nix :noweb yes
  nixpkgs.overlays = [
    <<emacs-overlay>>
  ];
#+end_src

Overlay Emacs for latest release.
#+name: emacs-overlay
#+begin_src nix
  (import (builtins.fetchTarball {
    url = https://github.com/nix-community/emacs-overlay/archive/master.tar.gz;
    sha256 = "1m7qzrg7cgsf7l4caz71q1yjngyr48z9n8z701ppbdzk66ydfjfm";
  }))
#+end_src
** systemd timers
#+name: systemd-timers
#+begin_src nix
  systemd.user.timers."hello-world" = {
    wantedBy = [ "timers.target" ];
    timerConfig = {
	    OnBootSec = "2m";
	    OnUnitActiveSec = "2m";
	    Unit = "hello-world.service";
    };
  };

  systemd.user.services."hello-world" = {
    serviceConfig = {
      Type = "oneshot";
      ExecStart = "/etc/profiles/per-user/adham/bin/mbsync -Va";
      ExecStartPost = "/etc/profiles/per-user/adham/bin/notmuch new";
    };
  };
#+end_src

Taken from [[https://www.youtube.com/watch?v=1qd0iHadvdo][Chris Titus]].
#+name: systemd
#+begin_src nix
  systemd.extraConfig = ''
  DefaultTimeoutStopSec=10sec
  '';
#+end_src
